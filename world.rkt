#lang racket/gui
(require 2htdp/image)
(require 2htdp/universe)
(require "sprite.rkt")
(struct posn (x y) #:extra-constructor-name make-posn)
(struct sprite (type x y theta) #:transparent)
(struct object (type x y storage) #:transparent)
(struct resource (health wood stone) #:transparent)
(struct world (character meter herbs stones trees mobs) #:transparent)

;World
;- character (sprite) :- Type includes sprite-axe,sprite-hammer,sprite-sword, Initial theta = 0
;- meter (resource) :- Stores current value of Health, Wood and Stones, Initially (100,0,0)
;- herbs (list(object)) :- Type include empty, berry. Storage 5
;- stones (list(object)) :- Storage 5
;- trees (list(object)) :- Storage 5
;- mobs (list(object)) :- Types include Rabbit , Arctic Fox , Spider , Dragon. Storage refers to number of attacks before death.

(define background (rectangle 1300 700 "solid" (make-color 0 80 60)))
(define my-world
  (world (sprite (list "axe") 50 100 0)
         (resource 100 10 20)
         (list (object "empty" 1250 100 0)
               (object "empty" 1250 130 0)
               (object "empty" 1250 160 0)
               (object "empty" 1250 190 0)
               (object "empty" 1250 220 0)
               (object "empty" 1250 250 0)
               (object "empty" 700 500 0)
               (object "empty" 700 400 0)
               (object "empty" 800 600 0)
               (object "empty" 600 400 0)
               (object "berry" 50 560 5)
               (object "berry" 50 590 5)
               (object "berry" 50 620 5)
               (object "berry" 50 650 5)
               (object "berry" 400 100 5)
               (object "berry" 450 200 5)
               (object "berry" 20 30 5)
               (object "berry" 1000 300 5)
               (object "berry" 1250 500 5))
         (list (object "stone" 1100 100 5)
               (object "stone" 800 100 5)
               (object "stone" 700 50 5)
               (object "stone" 400 300 5)
               (object "stone" 550 550 5)
               (object "stone" 300 100 5)
               (object "stone" 600 200 5)
               (object "stone" 800 0 5)
               (object "stone" 850 200 5)
               (object "stone" 300 100 5))
         (list (object "tree" 100 400 5)
               (object "tree" 200 400 5)
               (object "tree" 300 400 5)
               (object "tree" 700 100 5)
               (object "tree" 600 100 5)
               (object "tree" 1000 500 5)
               (object "tree" 1000 100 5)
               (object "tree" 500 100 5)
               (object "tree" 500 600 5))
         (list (object "rabbit" 200 80 5)
               (object "rabbit" 800 350 5)
               (object "rabbit" 300 170 5)
               (object "wolf" 500 500 5))))

(define (string->img str)
  (cond ((equal? str "empty") (empty-herbs))
        ((equal? str "berry") (berry-herbs))
        ((equal? str "stone") (stones))
        ((equal? str "rabbit") (rabbit))
        ((equal? str "tree") (tree))
        ((equal? str "wolf") (wolf))))

(define (sprite->img lstr)
  (if (equal? (car lstr) "action")
      (cond ((equal? (cadr lstr) "axe") (sprite-axe-action))
            ((equal? (cadr lstr) "hammer") (sprite-hammer-action))
            ((equal? (cadr lstr) "sword") (sprite-hammer-action)))
      (cond ((equal? (car lstr) "axe") (sprite-axe))
            ((equal? (car lstr) "hammer") (sprite-hammer))
            ((equal? (car lstr) "sword") (sprite-sword)))))

(define (region type)
  (cond ((equal? type "empty") 25)
        ((equal? type "berry") 25)
        ((equal? type "stone") 30)
        ((equal? type "tree") 50)
        ((equal? type "rabbit") 20)
        ((equal? type "wolf") 30)))

(define (draw list background)
  (if (null? list) background
      (let* ((obj (car list)))
        (begin
          (set! background (place-image (string->img (object-type obj))
                                        (object-x obj)
                                        (object-y obj)
                                        background))
          (draw (cdr list) background)))))

(define (meters h w s)
  (add-line
   (add-line
    (add-line
     (add-line
      (add-line
       (add-line
        (rectangle 300 90 "solid" (make-color 0 51 25))
        57 20 283 20
        (make-pen (make-color 0 100 38) 15 "solid" "round" "round"))
       60 20 (+ (* (/ h 100) 220) 60) 20
       (make-pen (make-color 0 200 76) 12 "solid" "round" "round"))
      57 45 283 45
      (make-pen (make-color 100 50 0) 15 "solid" "round" "round"))
     60 45 (+ (* (/ w 100) 220) 60) 45
     (make-pen (make-color 153 76 0) 12 "solid" "round" "round"))
    57 70 283 70
    (make-pen (make-color 60 60 60) 15 "solid" "round" "round"))
   60 70 (+ (* (/ s 100) 220) 60) 70
   (make-pen (make-color 128 128 128) 12 "solid" "round" "round")))

(define (move-delta mob)
  (object (object-type mob) (+ (object-x mob) (- (random 7) 3)) (+ (object-y mob) (- (random 7) 3)) (object-storage mob)))

(define (random-movement mob_list)
  (if (null? mob_list) '()
      (cons (move-delta (car mob_list)) (random-movement (cdr mob_list)))))

(define (distance pos1 pos2)
  (sqrt (+ (expt (- (posn-x pos1) (posn-x pos2)) 2) (expt (- (posn-y pos1) (posn-y pos2)) 2))))

(define (collide-any? spr resource_list)
  (if (null? resource_list) '()
      (if (collide? spr (car resource_list)) (car resource_list)
          (collide-any? spr (cdr resource_list)))))

(define (collide? spr obj)
  (< (distance (make-posn (sprite-x spr) (sprite-y spr)) (make-posn (object-x obj) (object-y obj)))
     (+ (region (object-type obj)) 35)))

(define (increment type current)
  (cond ((equal? type "berry") (min (+ current 5) 100))
        ((equal? type "rabbit") (min (+ current 15) 100))
        ((equal? type "tree") (min (+ current 10) 100))
        ((equal? type "stone") (min (+ current 10) 100))
        ((equal? type "wolf") (min (+ current 40) 100))))

(define (decrement type current)
  (cond ((equal? type "time") (max (- current 0.1) 0))
        ((equal? type "attack") (max (- current 20) 0))))

(define (render-map input-world)
  (place-image (meters (resource-health (world-meter input-world))
                       (resource-wood (world-meter input-world))
                       (resource-stone (world-meter input-world)))
               153
               652
               (place-image (rotate (sprite-theta (world-character input-world))
                                    (sprite->img (sprite-type (world-character input-world))))
                            (sprite-x (world-character input-world))
                            (sprite-y (world-character input-world))
                            (draw (world-mobs input-world)
                                  (draw (world-trees input-world)
                                        (draw (world-stones input-world)
                                              (draw (world-herbs input-world) background)))))))

(define (update-world-on-tick input-world)
  (world (sprite (remove "action" (sprite-type (world-character input-world)))
                 (sprite-x (world-character input-world))
                 (sprite-y (world-character input-world))
                 (sprite-theta (world-character input-world)))
         (resource (decrement "time" (resource-health (world-meter input-world)))
                   (resource-wood (world-meter input-world))
                   (resource-stone (world-meter input-world)))
         (world-herbs input-world)
         (world-stones input-world)
         (world-trees input-world)
         (random-movement (world-mobs input-world))))
         
(define (update-sprite-pos input-world new-pos)
  (world (sprite (sprite-type (world-character input-world))
                 (posn-x new-pos)
                 (posn-y new-pos)
                 (sprite-theta (world-character input-world)))
         (world-meter input-world)
         (world-herbs input-world)
         (world-stones input-world)
         (world-trees input-world)
         (world-mobs input-world)))

(define (update-sprite-type input-world)
  (define col-obj (collide-any? (world-character input-world) (append (world-herbs input-world)
                                                                      (world-stones input-world)
                                                                      (world-trees input-world)
                                                                      (world-mobs input-world))))
  (cond ((equal? col-obj '()) (world (sprite (cons "action" (sprite-type (world-character input-world)))
                                             (sprite-x (world-character input-world))
                                             (sprite-y (world-character input-world))
                                             (sprite-theta (world-character input-world)))
                                     (world-meter input-world)
                                     (world-herbs input-world)
                                     (world-stones input-world)
                                     (world-trees input-world)
                                     (world-mobs input-world)))
        ((equal? (object-type col-obj) "empty") (world (sprite (cons "action" (sprite-type (world-character input-world)))
                                                               (sprite-x (world-character input-world))
                                                               (sprite-y (world-character input-world))
                                                               (sprite-theta (world-character input-world)))
                                                       (world-meter input-world)
                                                       (world-herbs input-world)
                                                       (world-stones input-world)
                                                       (world-trees input-world)
                                                       (world-mobs input-world)))
        ((equal? (object-type col-obj) "berry") (if (= (object-storage col-obj) 1)
                                                    (world (sprite (cons "action" (sprite-type (world-character input-world)))
                                                                   (sprite-x (world-character input-world))
                                                                   (sprite-y (world-character input-world))
                                                                   (sprite-theta (world-character input-world)))
                                                           (resource (increment "berry" (resource-health (world-meter input-world)))
                                                                     (resource-wood (world-meter input-world))
                                                                     (resource-stone (world-meter input-world)))
                                                           (cons (object "empty" (object-x col-obj) (object-y col-obj) 0)
                                                                 (remove col-obj (world-herbs input-world)))
                                                           (world-stones input-world)
                                                           (world-trees input-world)
                                                           (world-mobs input-world))
                                                    (world (sprite (cons "action" (sprite-type (world-character input-world)))
                                                                   (sprite-x (world-character input-world))
                                                                   (sprite-y (world-character input-world))
                                                                   (sprite-theta (world-character input-world)))
                                                           (resource (increment "berry" (resource-health (world-meter input-world)))
                                                                     (resource-wood (world-meter input-world))
                                                                     (resource-stone (world-meter input-world)))
                                                           (cons (object "berry" (object-x col-obj) (object-y col-obj) (- (object-storage col-obj) 1))
                                                                 (remove col-obj (world-herbs input-world)))
                                                           (world-stones input-world)
                                                           (world-trees input-world)
                                                           (world-mobs input-world))))
        ((equal? (object-type col-obj) "stone") (if (= (object-storage col-obj) 1)
                                                    (world (sprite (cons "action" (sprite-type (world-character input-world)))
                                                                   (sprite-x (world-character input-world))
                                                                   (sprite-y (world-character input-world))
                                                                   (sprite-theta (world-character input-world)))
                                                           (resource (resource-health (world-meter input-world))
                                                                     (resource-wood (world-meter input-world))
                                                                     (increment "stone" (resource-stone (world-meter input-world))))
                                                           (world-herbs input-world)
                                                           (remove col-obj (world-stones input-world))
                                                           (world-trees input-world)
                                                           (world-mobs input-world))
                                                    (world (sprite (cons "action" (sprite-type (world-character input-world)))
                                                                   (sprite-x (world-character input-world))
                                                                   (sprite-y (world-character input-world))
                                                                   (sprite-theta (world-character input-world)))
                                                           (resource (resource-health (world-meter input-world))
                                                                     (resource-wood (world-meter input-world))
                                                                     (increment "stone" (resource-stone (world-meter input-world))))
                                                           (world-herbs input-world)
                                                           (cons (object "stone" (object-x col-obj) (object-y col-obj) (- (object-storage col-obj) 1))
                                                                 (remove col-obj (world-stones input-world)))
                                                           (world-trees input-world)
                                                           (world-mobs input-world))))
        ((equal? (object-type col-obj) "tree") (if (= (object-storage col-obj) 1)
                                                   (world (sprite (cons "action" (sprite-type (world-character input-world)))
                                                                  (sprite-x (world-character input-world))
                                                                  (sprite-y (world-character input-world))
                                                                  (sprite-theta (world-character input-world)))
                                                          (resource (resource-health (world-meter input-world))
                                                                    (increment "tree" (resource-wood (world-meter input-world)))
                                                                    (resource-stone (world-meter input-world)))
                                                          (world-herbs input-world)
                                                          (world-stones input-world)
                                                          (remove col-obj (world-trees input-world))
                                                          (world-mobs input-world))
                                                   (world (sprite (cons "action" (sprite-type (world-character input-world)))
                                                                  (sprite-x (world-character input-world))
                                                                  (sprite-y (world-character input-world))
                                                                  (sprite-theta (world-character input-world)))
                                                          (resource (resource-health (world-meter input-world))
                                                                    (increment "tree" (resource-wood (world-meter input-world)))
                                                                    (resource-stone (world-meter input-world)))
                                                          (world-herbs input-world)
                                                          (world-stones input-world)
                                                          (cons (object "tree" (object-x col-obj) (object-y col-obj) (- (object-storage col-obj) 1))
                                                                (remove col-obj (world-trees input-world)))
                                                          (world-mobs input-world))))
        (else (if (= (object-storage col-obj) 1)
                                                   (world (sprite (cons "action" (sprite-type (world-character input-world)))
                                                                  (sprite-x (world-character input-world))
                                                                  (sprite-y (world-character input-world))
                                                                  (sprite-theta (world-character input-world)))
                                                          (resource (increment (object-type col-obj) (resource-health (world-meter input-world)))
                                                                    (resource-wood (world-meter input-world))
                                                                    (resource-stone (world-meter input-world)))
                                                          (world-herbs input-world)
                                                          (world-stones input-world)
                                                          (world-trees input-world)
                                                          (remove col-obj (world-mobs input-world)))
                                                   (world (sprite (cons "action" (sprite-type (world-character input-world)))
                                                                  (sprite-x (world-character input-world))
                                                                  (sprite-y (world-character input-world))
                                                                  (sprite-theta (world-character input-world)))
                                                          (resource (resource-health (world-meter input-world))
                                                                    (resource-wood (world-meter input-world))
                                                                    (resource-stone (world-meter input-world)))
                                                          (world-herbs input-world)
                                                          (world-stones input-world)
                                                          (world-trees input-world)
                                                          (cons (object (object-type col-obj) (object-x col-obj) (object-y col-obj) (- (object-storage col-obj) 1))
                                                                (remove col-obj (world-mobs input-world))))))))

(define (key-event input-world a-key)
  (cond ((key=? a-key "up") (update-sprite-pos input-world (make-posn
                                                            (sprite-x (world-character input-world))
                                                            (- (sprite-y (world-character input-world)) 3))))
        ((key=? a-key "down") (update-sprite-pos input-world (make-posn
                                                              (sprite-x (world-character input-world))
                                                              (+ (sprite-y (world-character input-world)) 3))))
        ((key=? a-key "left") (update-sprite-pos input-world (make-posn
                                                              (- (sprite-x (world-character input-world)) 3)
                                                              (sprite-y (world-character input-world)))))
        ((key=? a-key "right") (update-sprite-pos input-world (make-posn
                                                               (+ (sprite-x (world-character input-world)) 3)
                                                               (sprite-y (world-character input-world)))))
        ((key=? a-key " ") (update-sprite-type input-world))
        (else input-world)))

(big-bang my-world
          (to-draw render-map)
          (on-tick update-world-on-tick 1/30)
          (on-key key-event)
          (display-mode 'fullscreen))